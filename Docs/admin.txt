================ ВНИМАНИЕ!!! ===================================
Имена переменных в контроллерах передоваемых в шаблоны имеют значение!

$item - для редактирования текущий объект
$items - для ленты(списка) объектов или список для помощи при редактировании(без потомков)
$items_with_children - для помощи при редактировании список объектов с потомками если есть такие(необязательно из текущей модели)
$existing_fields - существующие поля модели(в таблице в БД)
$columns - динамические колонки для отображения в интерфейсе адмики из модели *Columns
$gallery - галерея изображений из модели *Images
$parent_element - есть ли у элемента родительский(такойже) (bool)
=============================================================================
Идеология.

Большинство миграций, контроллеров, моделей имеют одинаковую или очень похожую структуру.
Не хотелось бы переписывать код за каждым разом. Возможно надо выучить [CTRL + C], [CTRL + V] и всё?
Нет не всё. Ещё [SHIFT + F6].

Во фреймворке Laravel в стандартном rest-контроллере используются методы:
index, create, store, edit, update, destroy.
Во всех методах из перечисленных(за исключением index) идёт работа с одним объектом.
Это может быть товар или запись, или статья и т.д. соответственно некий объект может иметь универсальное название "item".
Для этих же методов могут понадобиться для вспомогательных целей список объектов другого типа или
список объектов другого типа с потомками, соответственно можно дать им название "items" или "items_with_children"
например список категорий при редактировании товара.
В методе "index" будут использоваться списки с потомками или без. Для универсальности
можно оставить названия переменных те же "items" и/или "items_with_children".
И так. Имея всего три имени переменных можно покрыть большенство однотипных задач.
Плюс такого подхода заключается в том, что не надо плодить шаблоны отображения(*.blade.php)
т.к. в шаблонах будут одни и теже переменные. Так же могут быть добавлены и другие служебные переменные
требующиеся во всех шаблонах. В дополнение создаются шаблоны для каждого поля из БД.
Одно поле - один шаблон. И тут опять чтобы не плодить шаблоны создаём тип поля т.к. поля могут быть разными,
а тип одинаковым. Например, поля "title" и "name" могут иметь тип и шаблон "string",
"description" и "announce" могут иметь тип и шаблон "text" и т.д.

index => [
    собственные_объекты => items/items_with_children
]
create/store/edit/update/destroy => [
    собственный_объект => item,
    вспомогательные_объекты => items/items_with_children
]
=============================================================================

Добавление кастомного поля в форму редактирования сущности на примере "Email".
1. Добавить запись в таблицу *_columns
    origin_name - название колонки в таблице сущности (email) (string)
    type - условный тип записи (требуется в шаблонах) (string)
    show_name - название отображаемое в админке (string)
    sort_list - сортировка в ленте (int)
    sort_single - сортировка на детальной странице (int)
    is_show_anons - показывать ли в ленте (bool)
    is_show_single - показывать ли на детальной (bool)

2. Создать новый или использовать существующий шаблон "resources/views/admin/parts/form/type/email".

3. В методе Controller::base_fields() добавить соответствующий request field в переменную $data.
   Например:
   if ($request->has('email')){
     $data['email'] = $request->input('email');
   }
=====================================================================================
Вложенность шаблонов
1. index.blade.php -> parts/index_template.blade.php
2. edit.blade.php -> parts/form_edit.blade.php -> parts/form/type/type.blade.php
3. create.blade.php -> parts/form_edit.blade.php -> parts/form/type/type.blade.php
=====================================================================================
Галлерея изображений для сущности на примере Page
1. Добавить миграцию для изображений ..._create_pages_images_table.php
2. В методе PageController::edit добавить для view 'gallery' => PageImages::where('page_id', $id)->orderBy('sort')->get(),
3. В методе PageController::update добавить $this->deleteGallery() и $this->saveGallary()
=====================================================================================
